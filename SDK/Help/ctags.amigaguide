@database CTAGS
@master "CTAGS.1"
@remark "manual page source format generated by PolyglotMan v3.2 available at http://polyglotman.sourceforge.net/"
@wordwrap
@tab 8
@index "CTAGS command"
@index "man page conversion"
@index "AmigaGuide format"
@index "Unix documentation"
  
@node sect0 "Name"
@prev overview
@toc main
@index " section"
ctags - Generate tag files for source code   
@endnode

@node sect1 "Synopsis"
@prev sect0
@toc main
@index " section"


@{bullet} @{b}ctags@{ub} [@{b}options@{ub}] [@{i}file(s)@{ui}] @{lindent 3}
@{lindent 0}

@{bullet} @{b}etags@{ub} [@{b}options@{ub}] [@{i}file(s)@{ui}] @{lindent 3}
  @{lindent 0}


@endnode

@node sect2 "Description"
@prev sect1
@toc main
@index " section"
The @{b}ctags@{ub} and @{b}etags@{ub} programs (hereinafter collectively referred to as @{b}ctags@{ub}, except where distinguished) generate an index (or "tag") file for a variety of language objects found in @{i}file(s)@{ui}. This tag file allows these items to be quickly and easily located by a text editor or other utility. A "tag" signifies a language object for which an index entry is available (or, alternatively, the index entry created for that object).  Alternatively, @{b}ctags@{ub} can generate a cross reference file which lists, in human readable form, information about the various source objects found in a set of language files.  Tag index files are supported by numerous editors, which allow the user to locate the object associated with a name appearing in a source file and jump to the file and line which defines the name. Those known about at the time of this release are:  @{lindent 3}
@{"Vi(1)" link Vi1 @index "Vi"}@{b}Vi@{ub}(1) and its derivatives (e.g. Elvis, Vim, Vile, Lemmy), @{b}CRiSP@{ub}, @{b}Emacs@{ub}, @{b}FTE@{ub} (Folding Text Editor), @{b}JED@{ub}, @{b}jEdit@{ub}, @{b}NEdit@{ub} (Nirvana Edit), @{b}TSE@{ub} (The SemWare Editor), @{b}UltraEdit@{ub}, @{b}WorkSpace@{ub}, @{b}X2@{ub}, @{b}Zeus@{ub} @{lindent 0}
 @{b}Ctags@{ub} is capable of generating different kinds of tags for each of many different languages. For a complete list of supported languages, the names by which they are recognized, and the kinds of tags which are generated for each, see the @{b}--list-languages@{ub} and @{b}--list-kinds@{ub} options.   
@endnode

@node sect3 "Source Files"
@prev sect2
@toc main
@index "Vi section"
 Unless the @{b}--language-force@{ub} option is specified, the language of each source file is automatically selected based upon a mapping of file names to languages. The mappings in effect for each language may be display using the @{b}--list-maps@{ub} option and may be changed using the @{b}--langmap@{ub} option. On platforms which support it, if the name of a file is not mapped to a language and the file is executable, the first line of the file is checked to see if the file is a "#!" script for a recognized language.  By default, all other files names are ignored. This permits running @{b}ctags@{ub} on all files in either a single directory (e.g. "ctags *"), or on all files in an entire source directory tree (e.g. "ctags -R"), since only those files whose names are mapped to languages will be scanned.  [The reason that .h extensions are mapped to C++ files rather than C files is because it is common to use .h extensions in C++, and no harm results in treating them as C++ files.]   
@endnode

@node sect4 "Options"
@prev sect3
@toc main
@index "Vi section"
 Despite the wealth of available options, defaults are set so that @{b}ctags@{ub} is most commonly executed without any options (e.g. "ctags *", or "ctags -R"), which will create a tag file in the current directory for all recognized source files. The options described below are provided merely to allow custom tailoring to meet special needs.  Note that spaces separating the single-letter options from their parameters are optional.  Note also that the boolean parameters to the long form options (those beginning with "--" and that take a "@{i}[=yes@{ui}|@{i}no]@{ui}" parameter) may be omitted, in which case "@{b}=@{ub}@{i}yes@{ui}" is implied. (e.g. @{b}--sort@{ub} is equivalent to @{b}--sort@{ub}=@{i}yes@{ui}). Note further that "=@{i}1@{ui}" and "=@{i}on@{ui}" are considered synonyms for "=@{i}yes@{ui}", and that "=@{i}0@{ui}" and "=@{i}off@{ui}" are considered synonyms for "=@{i}no@{ui}".  Some options are either ignored or useful only when used while running in etags mode (see @{b}-e@{ub} option). Such options will be noted.  Most options may appear anywhere on the command line, affecting only those files which follow the option. A few options, however, must appear before the first file name and will be noted as such.  Options taking language names will accept those names in either upper or lower case. See the @{b}--list-languages@{ub} option for a complete list of the built-in language names.  

@{bullet} @{b}-a@{ub} @{lindent 3}
Equivalent to @{b}--append@{ub}.  @{lindent 0}

@{bullet} @{b}-B@{ub} @{lindent 3}
Use backward searching patterns (e.g. ?pattern?). [Ignored in etags mode]  @{lindent 0}

@{bullet} @{b}-e@{ub} @{lindent 3}
Enable etags mode, which will create a tag file for use with the Emacs editor. Alternatively, if @{b}ctags@{ub} is invoked by a name containing the string "etags" (either by renaming, or creating a link to, the executable), etags mode will be enabled. This option must appear before the first file name.  @{lindent 0}

@{bullet} @{b}-f@{ub}@{i} tagfile@{ui} @{lindent 3}
Use the name specified by @{i}tagfile@{ui} for the tag file (default is "tags", or "TAGS" when running in etags mode). If @{i}tagfile@{ui} is specified as "-", then the tag file is written to standard output instead. @{b}Ctags@{ub} will stubbornly refuse to take orders if @{i}tagfile@{ui} exists and its first line contains something other than a valid tags line. This will save your neck if you mistakenly type "ctags -f *.c", which would otherwise overwrite your first C file with the tags generated by the rest! It will also refuse to accept a multi character file name which begins with a '-' (dash) character, since this most likely means that you left out the tag file name and this option tried to grab the next option as the file name. If you really want to name your output tag file "-ugly", specify it as "./-ugly". This option must appear before the first file name. If this option is specified more than once, only the last will apply.  @{lindent 0}

@{bullet} @{b}-F@{ub} @{lindent 3}
Use forward searching patterns (e.g. /pattern/) (default). [Ignored in etags mode]  @{lindent 0}

@{bullet} @{b}-h@{ub}@{i} list@{ui} @{lindent 3}
Specifies a list of file extensions, separated by periods, which are to be interpreted as include (or header) files. To indicate files having no extension, use a period not followed by a non-period character (e.g. ".", "..x", ".x."). This option only affects how the scoping of a particular kinds of tags is interpreted (i.e. whether or not they are considered as globally visible or visible only within the file in which they are defined); it does not map the extension to any particular language. Any tag which is located in a non-include file and cannot be seen (e.g. linked to) from another file is considered to have file-limited (e.g. static) scope. No kind of tag appearing in an include file will be considered to have file-limited scope. If the first character in the list is a plus sign, then the extensions in the list will be appended to the current list; otherwise, the list will replace the current list. See, also, the @{b}--file-scope@{ub} option. The default list is ".h.H.hh.hpp.hxx.h++.inc.def". To restore the default list, specify @{b}-h@{ub} @{i}default@{ui}. Note that if an extension supplied to this option is not already mapped to a particular language (see @{b}SOURCE FILES@{ub}, above), you will also need to use either the @{b}--langmap@{ub} or @{b}--language-force@{ub} option.  @{lindent 0}

@{bullet} @{b}-I@{ub}@{i} tokenlist@{ui} @{lindent 3}
Specifies a list of tokens which are to be specially handled while parsing C and C++ source files. This option is specifically provided to handle special cases arising through the use of preprocessor macros. When the tokens listed are simple tokens, these tokens will be ignored during parsing of the source files. If a token is suffixed with a '+' character, @{b}ctags@{ub} will also ignore any parenthesis-enclosed argument list which may immediately follow the token in the source files. If two tokens are separated with the '=' character, the first token is replaced by the second token for parsing purposes. The list of tokens may be supplied directly on the command line or read in from a separate file. If the first character of @{i}tokenlist@{ui} is '@', '.' or a pathname separator ('/' or '\'), or the first two characters specify a drive letter (e.g. "C:"), the parameter @{i}tokenlist@{ui} will be interpreted as a filename from which to read a list of tokens, one per input line. Otherwise, @{i}tokenlist@{ui} is a list of tokens (or token pairs) to be specially handled, each delimited by a either a comma or by white space (in which case the list should be quoted to keep the entire list as one command line argument). Multiple @{b}-I@{ub} options may be supplied. To clear the list of ignore tokens, supply a single dash ("-") for @{i}tokenlist@{ui}.  This feature is useful when preprocessor macros are used in such a way that they cause syntactic confusion due to their presence. Indeed, this is the best way of working around a number of problems caused by the presence of syntax-busting macros in source files (see @{b}BUGS@{ub}, below). Some examples will illustrate this point.  @{lindent 6}
int foo ARGDECL4(void *, ptr, long int, nbytes) @{lindent 3}

@{lindent 0}
 

@{bullet} In the above example, the macro "ARGDECL4" would be mistakenly interpreted to @{lindent 3}
be the name of the function instead of the correct name of "foo". Specifying @{b}-I@{ub} @{i}ARGDECL4@{ui} results in the correct behavior.  @{lindent 6}
/* creates an RCS version string in module */ 
MODULE_VERSION("$Revision: 1.30 $") @{lindent 3}

@{lindent 0}
 

@{bullet} In the above example the macro invocation looks too much like a function @{lindent 3}
definition because it is not followed by a semicolon (indeed, it could even be followed by a global variable definition that would look much like a K&R style function parameter declaration). In fact, this seeming function definition could possibly even cause the rest of the file to be skipped over while trying to complete the definition. Specifying @{b}-I@{ub} @{i}MODULE_VERSION+@{ui} would avoid such a problem.  @{lindent 6}
CLASS Example { 
    // your content here
 
}; @{lindent 3}

@{lindent 0}
 

@{bullet} The example above uses "CLASS" as a preprocessor macro which expands to @{lindent 3}
something different for each platform. For instance CLASS may be defined as "class __declspec(dllexport)" on Win32 platforms and simply "class" on UNIX. Normally, the absence of the C++ keyword "class" would cause the source file to be incorrectly parsed. Correct behavior can be restored by specifying @{b}-I@{ub} @{i}CLASS=class@{ui}.  @{lindent 0}

@{bullet} @{b}-L@{ub}@{i} file@{ui} @{lindent 3}
Read from @{i}file@{ui} a list of file names for which tags should be generated. If @{i}file@{ui} is specified as "-", then file names are read from standard input. File names read using this option are processed following file names appearing on the command line. Options all also accepted in this input. If this option is specified more than once, only the last will apply. @{b}Note:@{ub} @{i}file@{ui} is read in line-oriented mode, where a new line is the only delimiter and spaces are considered significant, in order that file names containing spaces may be supplied; this can affect how options are parsed if included in the input.  @{lindent 0}

@{bullet} @{b}-n@{ub} @{lindent 3}
Equivalent to @{b}--excmd@{ub}=@{i}number@{ui}.  @{lindent 0}

@{bullet} @{b}-N@{ub} @{lindent 3}
Equivalent to @{b}--excmd@{ub}=@{i}pattern@{ui}.  @{lindent 0}

@{bullet} @{b}-o@{ub}@{i} tagfile@{ui} @{lindent 3}
Equivalent to @{b}-f@{ub} @{i}tagfile@{ui}.  @{lindent 0}

@{bullet} @{b}-R@{ub} @{lindent 3}
Equivalent to @{b}--recurse@{ub}.  @{lindent 0}

@{bullet} @{b}-u@{ub} @{lindent 3}
Equivalent to @{b}--sort@{ub}=@{i}no@{ui} (i.e. "unsorted").  @{lindent 0}

@{bullet} @{b}-V@{ub} @{lindent 3}
Equivalent to @{b}--verbose@{ub}.  @{lindent 0}

@{bullet} @{b}-w@{ub} @{lindent 3}
This option is silently ignored for backward-compatibility with the ctags of SVR4 Unix.  @{lindent 0}

@{bullet} @{b}-x@{ub} @{lindent 3}
Print a tabular, human-readable cross reference (xref) file to standard output instead of generating a tag file. The information contained in the output includes: the tag name; the kind of tag; the line number, file name, and source line (with extra white space condensed) of the file which defines the tag. No tag file is written and all options affecting tag file output will be ignored. Example applications for this feature are generating a listing of all functions located in a source file (e.g. @{b}ctags -x --c-kinds@{ub}=@{i}f@{ui} @{i}file@{ui}), or generating a list of all externally visible global variables located in a source file (e.g. @{b}ctags -x --c-kinds@{ub}=@{i}v@{ui} @{b}--file-scope@{ub}=@{i}no file@{ui}). This option must appear before the first file name.  @{lindent 0}

@{bullet} @{b}--append@{ub}[=@{i}yes@{ui}|@{i}no@{ui}] @{lindent 3}
Indicates whether tags generated from the specified files should be appended to those already present in the tag file or should replace them. This option is off by default. This option must appear before the first file name.  @{lindent 0}

@{bullet} @{b}--etags-include@{ub}=@{i}file@{ui} @{lindent 3}
Include a reference to @{i}file@{ui} in the tag file. This option may be specified as many times as desired. This supports Emacs' capability to use a tag file which "includes" other tag files. [Available only in etags mode]  @{lindent 0}

@{bullet} @{b}--exclude@{ub}=[@{i}pattern@{ui}] @{lindent 3}
Add @{i}pattern@{ui} to a list of excluded files and directories. This option may be specified as many times as desired. For each file name considered by @{b}ctags@{ub}, each @{i}pattern@{ui} specified using this option will be compared against both the complete path (e.g. some/path/base.ext) and the base name (e.g. base.ext) of the file, thus allowing patterns which match a given file name irrespective of its path, or match only a specific path. If appropriate support is available from the runtime library of your C compiler, then @{i}pattern@{ui} may contain the usual shell wildcards (not regular expressions) common on Unix (be sure to quote the option parameter to protect the wildcards from being expanded by the shell before being passed to @{b}ctags@{ub}; also be aware that wildcards can match the slash character, '/'). You can determine if shell wildcards are available on your platform by examining the output of the @{b}--version@{ub} option, which will include "+wildcards" in the compiled feature list; otherwise, @{i}pattern@{ui} is matched against file names using a simple textual comparison.  If @{i}pattern@{ui} begins with the character '@', then the rest of the string is interpreted as a file name from which to read exclusion patterns, one per line. If @{i}pattern@{ui} is empty, the list of excluded patterns is cleared. Note that at program startup, the default exclude list contains "EIFGEN", "SCCS", "RCS", and "CVS", which are names of directories for which it is generally not desirable to descend while processing the @{b}--recurse@{ub} option.  @{lindent 0}

@{bullet} @{b}--excmd@{ub}=@{i}type@{ui} @{lindent 3}
Determines the type of EX command used to locate tags in the source file. [Ignored in etags mode]  The valid values for @{i}type@{ui} (either the entire word or the first letter is accepted) are:  @{lindent 6}
@{lindent 3}

@{bullet} @{i}number@{ui} @{lindent 6}
Use only line numbers in the tag file for locating tags. This has four advantages:  @{lindent 9}
@{lindent 6}

@{bullet} 1. @{lindent 9}
Significantly reduces the size of the resulting tag file. @{lindent 6}

@{bullet} 2. @{lindent 9}
Eliminates failures to find tags because the line defining the tag has changed, causing the pattern match to fail (note that some editors, such as @{b}vim@{ub}, are able to recover in many such instances). @{lindent 6}

@{bullet} 3. @{lindent 9}
Eliminates finding identical matching, but incorrect, source lines (see @{b}BUGS@{ub}, below). @{lindent 6}

@{bullet} 4. @{lindent 9}
Retains separate entries in the tag file for lines which are identical in content. In @{i}pattern@{ui} mode, duplicate entries are dropped because the search patterns they generate are identical, making the duplicate entries useless. @{lindent 6}

@{lindent 3}
  

@{bullet} However, this option has one significant drawback: changes to the source files @{lindent 6}
can cause the line numbers recorded in the tag file to no longer correspond to the lines in the source file, causing jumps to some tags to miss the target definition by one or more lines. Basically, this option is best used when the source code to which it is applied is not subject to change. Selecting this option type causes the following options to be ignored: @{b}-BF@{ub}.  @{lindent 3}

@{bullet} @{i}pattern@{ui} @{lindent 6}
Use only search patterns for all tags, rather than the line numbers usually used for macro definitions. This has the advantage of not referencing obsolete line numbers when lines have been added or removed since the tag file was generated.  @{lindent 3}

@{bullet} @{i}mixed@{ui} @{lindent 6}
In this mode, patterns are generally used with a few exceptions. For C, line numbers are used for macro definition tags. This was the default format generated by the original @{b}ctags@{ub} and is, therefore, retained as the default for this option. For Fortran, line numbers are used for common blocks because their corresponding source lines are generally identical, making pattern searches useless for finding all matches. @{lindent 3}

@{lindent 0}
 

@{bullet} @{b}--extra@{ub}=@{i}[+|-]flags@{ui} @{lindent 3}
Specifies whether to include extra tag entries for certain kinds of information. The parameter @{i}flags@{ui} is a set of one-letter flags, each representing one kind of extra tag entry to include in the tag file. If @{i}flags@{ui} is preceded by by either the '+' or '-' character, the effect of each flag is added to, or removed from, those currently enabled; otherwise the flags replace any current settings. The meaning of each flag is as follows:  @{lindent 0}

@{lindent 3}




@{bullet} @{i}f@{ui} @{lindent 6}
Include an entry for the base file name of every source file (e.g. "example.c"), which addresses the first line of the file. @{lindent 3}

@{bullet} @{i}q@{ui} @{lindent 6}
Include an extra class-qualified tag entry for each tag which is a member of a class (for languages for which this information is extracted; currently C++, Eiffel, and Java). The actual form of the qualified tag depends upon the language from which the tag was derived (using a form that is most natural for how qualified calls are specified in the language). For C++, it is in the form "class::member"; for Eiffel and Java, it is in the form "class.member". This may allow easier location of a specific tags when multiple occurrences of a tag name occur in the tag file. Note, however, that this could potentially more than double the size of the tag file. @{lindent 3}

@{lindent 0}
 

@{bullet} @{b}--fields@{ub}=@{i}[+|-]flags@{ui} @{lindent 3}
Specifies the available extension fields which are to be included in the entries of the tag file (see @{b}TAG FILE FORMAT@{ub}, below, for more information). The parameter @{i}flags@{ui} is a set of one-letter flags, each representing one type of extension field to include, with the following meanings (disabled by default unless indicated):  @{lindent 0}

 @{lindent 3}




@{bullet} @{i}a@{ui} @{lindent 6}
Access (or export) of class members @{lindent 3}

@{bullet} @{i}f@{ui} @{lindent 6}
File-restricted scoping [enabled] @{lindent 3}

@{bullet} @{i}i@{ui} @{lindent 6}
Inheritance information @{lindent 3}

@{bullet} @{i}k@{ui} @{lindent 6}
Kind of tag as a single letter [enabled] @{lindent 3}

@{bullet} @{i}K@{ui} @{lindent 6}
Kind of tag as full name @{lindent 3}

@{bullet} @{i}l@{ui} @{lindent 6}
Language of source file containing tag @{lindent 3}

@{bullet} @{i}m@{ui} @{lindent 6}
Implementation information @{lindent 3}

@{bullet} @{i}n@{ui} @{lindent 6}
Line number of tag definition @{lindent 3}

@{bullet} @{i}s@{ui} @{lindent 6}
Scope of tag definition [enabled] @{lindent 3}

@{bullet} @{i}S@{ui} @{lindent 6}
Signature of routine (e.g. prototype or parameter list) @{lindent 3}

@{bullet} @{i}z@{ui} @{lindent 6}
Include the "kind:" key in kind field  @{lindent 3}

@{lindent 0}
 @{lindent 3}
Each letter or group of letters may be preceded by either '+' to add it to the default set, or '-' to exclude it. In the absence of any preceding '+' or '-' sign, only those kinds explicitly listed in @{i}flags@{ui} will be included in the output (i.e. overriding the default set). This option is ignored if the option @{b}--format@{ub}=@{i}1@{ui} has been specified. The default value  of this options is @{i}fks@{ui}. @{lindent 0}
 

@{bullet} @{b}--file-scope@{ub}[=@{i}yes@{ui}|@{i}no@{ui}] @{lindent 3}
Indicates whether tags scoped only for a single file (i.e. tags which cannot be seen outside of the file in which they are defined, such as "static" tags) should be included in the output. See, also, the @{b}-h@{ub} option. This option is enabled by default.  @{lindent 0}

@{bullet} @{b}--filter@{ub}[=@{i}yes@{ui}|@{i}no@{ui}] @{lindent 3}
Causes @{b}ctags@{ub} to behave as a filter, reading source file names from standard input and printing their tags to standard output on a file-by-file basis. If @{b}--sorted@{ub} is enabled, tags are sorted only within the source file in which they are defined. File names are read from standard output in line-oriented input mode (see note for @{b}-L@{ub} option) and only after file names listed on the command line or from any file supplied using the @{b}-L@{ub} option. When this option is enabled, the options @{b}-f@{ub}, @{b}-o@{ub}, and @{b}--totals@{ub} are ignored. This option is quite esoteric and is disabled by default. This option must appear before the first file name.  @{lindent 0}

@{bullet} @{b}--filter-terminator@{ub}=@{i}string@{ui} @{lindent 3}
Specifies a string to print to standard output following the tags for each file name parsed when the @{b}--filter@{ub} option is enabled. This may permit an application reading the output of ctags to determine when the output for each file is finished. Note that if the file name read is a directory and @{b}--recurse@{ub} is enabled, this string will be printed only one once at the end of all tags found for by descending the directory. This string will always be separated from the last tag line for the file by its terminating newline. This option is quite esoteric and is empty by default. This option must appear before the first file name.  @{lindent 0}

@{bullet} @{b}--format@{ub}=@{i}level@{ui} @{lindent 3}
Change the format of the output tag file. Currently the only valid values for @{i}level@{ui} are @{i}1@{ui} or @{i}2@{ui}. Level 1 specifies the original tag file format and level 2 specifies a new extended format containing extension fields (but in a manner which retains backward-compatibility with original @{"vi(1)" link vi1 @index "vi"}@{b}vi@{ub}(1) implementations). The default level is 2. This option must appear before the first file name. [Ignored in etags mode]  @{lindent 0}

@{bullet} @{b}--help@{ub} @{lindent 3}
Prints to standard output a detailed usage description.  @{lindent 0}

@{bullet} @{b}--if0@{ub}[=@{i}yes@{ui}|@{i}no@{ui}] @{lindent 3}
Indicates a preference as to whether code within an "#if 0" branch of a preprocessor conditional should be examined for non-macro tags (macro tags are always included). Because the intent of this construct is to disable code, the default value of this options is @{i}no@{ui}. Note that this indicates a preference only and does not guarantee skipping code within an "#if 0" branch, since the fall-back algorithm used to generate tags when preprocessor conditionals are too complex follows all branches of a conditional. This option is disabled by default.  @{lindent 0}

@{bullet} @{b}--<LANG>-kinds@{ub}=@{i}[+|-]kinds@{ui} @{lindent 3}
Specifies a list of language-specific kinds of tags (or kinds) to include in the output file for a particular language, where @{b}<LANG>@{ub} is case-insensitive and is one of the built-in language names (see the @{b}--list-languages@{ub} option for a complete list). The parameter @{i}kinds@{ui} is a group of one-letter flags designating kinds of tags (particular to the language) to either include or exclude from the output. The specific sets of flags recognized for each language, their meanings and defaults may be list using the @{b}--list-kinds@{ub} option. Each letter or group of letters may be preceded by either '+' to add it to, or '-' to remove it from, the default set. In the absence of any preceding '+' or '-' sign, only those kinds explicitly listed in @{i}kinds@{ui} will be included in the output (i.e. overriding the default for the specified language).  As an example for the C language, in order to add prototypes and external variable declarations to the default set of tag kinds, but exclude macros, use @{b}--c-kinds@{ub}=@{i}+px-d@{ui}; to include only tags for functions, use @{b}--c-kinds@{ub}=@{i}f@{ui}.  @{lindent 0}

@{bullet} @{b}--langdef@{ub}=@{i}name@{ui} @{lindent 3}
Defines a new user-defined language, @{i}name@{ui}, to be parsed with regular expressions. Once defined, @{i}name@{ui} may be used in other options taking language names. The typical use of this option is to first define the language, then map file names to it using @{i}--langmap@{ui}, then specify regular expressions using @{i}--regex-<LANG>@{ui} to define how its tags are found.  @{lindent 0}

@{bullet} @{b}--langmap@{ub}=@{i}map[,map[...]]@{ui} @{lindent 3}
Controls how file names are mapped to languages (see the @{b}--list-maps@{ub} option). Each comma-separated @{i}map@{ui} consists of the language name (either a built-in or user-defined language), a colon, and a list of file extensions and/or file name patterns. A file extension is specified by preceding the extension with a period (e.g. ".c"). A file name pattern is specified by enclosing the pattern in parentheses (e.g. "([Mm]akefile)"). If appropriate support is available from the runtime library of your C compiler, then the file name pattern may contain the usual shell wildcards common on Unix (be sure to quote the option parameter to protect the wildcards from being expanded by the shell before being passed to @{b}ctags@{ub}). You can determine if shell wildcards are available on your platform by examining the output of the @{b}--version@{ub} option, which will include "+wildcards" in the compiled feature list; otherwise, the file name patterns are matched against file names using a simple textual comparison.  If the first character in a map is a plus sign, then the extensions and file name patterns in that map will be appended to the current map for that language; otherwise, the map will replace the current map. For example, to specify that only files with extensions of .c and .x are to be treated as C language files, use "@{b}--langmap@{ub}=@{i}c:.c.x@{ui}"; to also add files with extensions of .j as Java language files, specify "@{b}--langmap@{ub}=@{i}c:.c.x,java:+.j@{ui}". To map makefiles (.e.g files named either "Makefile", "makefile", or having the extension ".mak") to a language called "make", specify "@{b}--langmap@{ub}=@{i}make:([Mm]akefile).mak@{ui}". To map files having no extension, specify a period not followed by a non-period character (e.g. ".", "..x", ".x."). To clear the mapping for a particular language (thus inhibiting automatic generation of tags for that language), specify an empty extension list (e.g. "@{b}--langmap@{ub}=@{i}fortran:@{ui}"). To restore the default language mappings for all a particular language, supply the keyword "default" for the mapping. To specify restore the default language mappings for all languages, specify "@{b}--langmap@{ub}=@{i}default@{ui}". Note that file extensions are tested before file name patterns when inferring the language of a file.  @{lindent 0}

@{bullet} @{b}--language-force@{ub}=@{i}language@{ui} @{lindent 3}
By default, @{b}ctags@{ub} automatically selects the language of a source file, ignoring those files whose language cannot be determined (see @{b}SOURCE FILES@{ub}, above). This option forces the specified @{i}language@{ui} (case-insensitive; either built-in or user-defined) to be used for every supplied file instead of automatically selecting the language based upon its extension. In addition, the special value @{i}auto@{ui} indicates that the language should be automatically selected (which effectively disables this option).  @{lindent 0}

@{bullet} @{b}--languages@{ub}=@{i}[+|-]list@{ui} @{lindent 3}
Specifies the languages for which tag generation is enabled, with @{i}list@{ui} containing a comma-separated list of language names (case-insensitive; either built-in or user-defined). If the first language of @{i}list@{ui} is not preceded by either a '+' or '-', the current list will be cleared before adding or removing the languages in @{i}list@{ui}. Until a '-' is encountered, each language in the list will be added to the current list. As either the '+' or  removed from the current list, respectively. Thus, it becomes simple to replace the current list with a new one, or to add or remove languages from the current list. The actual list of files for which tags will be generated depends upon the language extension mapping in effect (see the @{b}--langmap@{ub} option). Note that all languages, including user-defined languages are enabled unless explicitly disabled using this option. Language names included in @{i}list@{ui} may be any built-in language or one previously defined with @{b}--langdef@{ub}. The default is "all", which is also accepted as a valid argument. See the @{b}--list-languages@{ub} option for a complete list of the built-in language names.  @{lindent 0}

@{bullet} @{b}--license@{ub} @{lindent 3}
Prints a summary of the software license to standard output.  @{lindent 0}

@{bullet} @{b}--line-directives@{ub}[=@{i}yes@{ui}|@{i}no@{ui}] @{lindent 3}
Specifies whether "#line" directives should be recognized. These are present in the output of preprocessors and contain the line number, and possibly the file name, of the original source file(s) from which the preprocessor output file was generated. When enabled, this option will cause @{b}ctags@{ub} to generate tag entries marked with the file names and line numbers of their locations original source file(s), instead of their actual locations in the preprocessor output. The actual file names placed into the tag file will have the same leading path components as the preprocessor output file, since it is assumed that the original source files are located relative to the preprocessor output file (unless, of course, the #line directive specifies an absolute path). This option is off by default. @{b}Note:@{ub} This option is generally only useful when used together with the @{b}--excmd@{ub}=@{i}number@{ui} (@{b}-n@{ub}) option. Also, you may have to use either the @{b}--langmap@{ub} or @{b}--language-force@{ub} option if the extension of the preprocessor output file is not known to @{b}ctags@{ub}.  @{lindent 0}

@{bullet} @{b}--links@{ub}[=@{i}yes@{ui}|@{i}no@{ui}] @{lindent 3}
Indicates whether symbolic links (if supported) should be followed. When disabled, symbolic links are ignored. This option is on by default.  @{lindent 0}

@{bullet} @{b}--list-kinds@{ub}[=@{i}language@{ui}|@{i}all@{ui}] @{lindent 3}
Lists the tag kinds recognized for either the specified language or all languages. Each kind of tag recorded in the tag file is represented by a one-letter flag, which is also used to filter the tags placed into the output through use of the @{b}--<LANG>-kind@{ub} option. Note that some languages and/or tag kinds may be implemented using regular expressions and may not be available if regex support is not compiled into @{b}ctags@{ub} (see the @{b}--regex-<LANG>@{ub} option). Each kind listed is enabled unless followed by "[off]".  @{lindent 0}

@{bullet} @{b}--list-maps@{ub}[=@{i}language@{ui}|@{i}all@{ui}] @{lindent 3}
Lists the file extensions and file name patterns which associate a file name with a language for either the specified language or all languages. See the @{b}--langmap@{ub} option, and @{b}SOURCE FILES@{ub}, above.  @{lindent 0}

@{bullet} @{b}--list-languages@{ub} @{lindent 3}
Lists the names of the languages understood by @{b}ctags@{ub}. These language names are case insensitive and may be used in the @{b}--language-force@{ub}, @{b}--languages@{ub}, @{b}--<LANG>-kinds@{ub}, and @{b}--regex-<LANG>@{ub} options.  @{lindent 0}

@{bullet} @{b}--options@{ub}=@{i}file@{ui} @{lindent 3}
Read additional options from @{i}file@{ui}. As a special case, if @{b}--options@{ub}=@{i}NONE@{ui} is specified as the first option on the command line, it will disable the automatic reading of any configuration options from either a file or the environment (see @{b}FILES@{ub}).  @{lindent 0}

@{bullet} @{b}--recurse@{ub}[=@{i}yes@{ui}|@{i}no@{ui}] @{lindent 3}
Recurse into directories encountered in the list of supplied files. If the list of supplied files is empty and no file list is specified with the @{b}-L@{ub} option, then the current directory (i.e. ".") is assumed. Symbolic links are followed. If you don't like these behaviors, either explicitly specify the files or pipe the output of @{"find(1)" link find1 @index "find"}@{b}find@{ub}(1) into @{b}ctags -L-@{ub} instead. @{b}Note:@{ub} This option is not supported on all platforms at present. It is available if the output of the @{b}--help@{ub} option includes this option. See, also, the @{b}--exclude@{ub} to limit recursion.  @{lindent 0}

@{bullet} @{b}--regex-<LANG>@{ub}=@{i}/regexp/replacement/[kind-spec/][flags]@{ui} @{lindent 3}
The @{i}/regexp/replacement/@{ui} pair define a regular expression replacement pattern, similar in style to @{b}sed@{ub} substitution commands, with which to generate tags from source files mapped to the named language, @{b}<LANG>@{ub}, (case-insensitive; either a built-in or user-defined language). The regular expression, @{i}regexp@{ui}, defines an extended regular expression (roughly that used by @{"egrep(1)" link egrep1 @index "egrep"}@{b}egrep@{ub}(1)), which is used to locate a single source line containing a tag and may specify tab characters using \t. When a matching line is found, a tag will be generated for the name defined by @{i}replacement@{ui}, which generally will contain the special back-references \1 through \9 to refer to matching sub-expression groups within @{i}regexp@{ui}. The '/' separator characters shown in the parameter to the option can actually be replaced by any character. Note that whichever separator character is used will have to be escaped with a backslash ('\') character wherever it is used in the parameter as something other than a separator. The regular expression defined by this option is added to the current list of regular expressions for the specified language unless the parameter is omitted, in which case the current list is cleared.  Unless modified by @{i}flags@{ui}, @{i}regexp@{ui} is interpreted as a Posix extended regular expression. The @{i}replacement@{ui} should expand for all matching lines to a non-empty string of characters, or a warning message will be reported. An optional kind specifier for tags matching @{i}regexp@{ui} may follow @{i}replacement@{ui}, which will determine what kind of tag is reported in the "kind" extension field (see @{b}TAG FILE FORMAT@{ub}, below). The full form of @{i}kind-spec@{ui} is in the form of a single letter, a comma, a name (without spaces), a comma, a description, followed by a separator, which specify the short and long forms of the kind value and its textual description (displayed using @{b}--list-kinds@{ub}). Either the kind name and/or the description may be omitted. If @{i}kind-spec@{ui} is omitted, it defaults to "@{i}r,regex@{ui}". Finally, @{i}flags@{ui} are one or more single-letter characters having the following effect upon the interpretation of @{i}regexp@{ui}:  @{lindent 0}

@{lindent 3}




@{bullet} @{i}b@{ui} @{lindent 6}
The pattern is interpreted as a Posix basic regular expression. @{lindent 3}

@{bullet} @{i}e@{ui} @{lindent 6}
The pattern is interpreted as a Posix extended regular expression (default). @{lindent 3}

@{bullet} @{i}i@{ui} @{lindent 6}
The regular expression is to be applied in a case-insensitive manner. @{lindent 3}

@{lindent 0}
 @{lindent 3}
Note that this option is available only if @{b}ctags@{ub} was compiled with support for regular expressions, which depends upon your platform. You can determine if support for regular expressions is compiled in by examining the output of the @{b}--version@{ub} option, which will include "+regex" in the compiled feature list.  For more information on the regular expressions used by @{b}ctags@{ub}, see either the @{b}regex(5,7)@{ub} man page, or the GNU info documentation for regex (e.g. "info regex"). @{lindent 0}
 

@{bullet} @{b}--sort@{ub}[=@{i}yes@{ui}|@{i}no@{ui}|@{i}foldcase@{ui}] @{lindent 3}
Indicates whether the tag file should be sorted on the tag name (default is @{i}yes@{ui}). Note that the original @{"vi(1)" link vi1 @index "vi"}@{b}vi@{ub}(1) required sorted tags.  The @{i}foldcase@{ui} value specifies case insensitive (or case-folded) sorting. Fast binary searches of tag files sorted with case-folding will require special support from tools using tag files, such as that found in the ctags readtags library, or Vim version 6.2 or higher (using "set ignorecase"). This option must appear before the first file name. [Ignored in etags mode]  @{lindent 0}

@{bullet} @{b}--tag-relative@{ub}[=@{i}yes@{ui}|@{i}no@{ui}] @{lindent 3}
Indicates that the file paths recorded in the tag file should be relative to the directory containing the tag file, rather than relative to the current directory, unless the files supplied on the command line are specified with absolute paths. This option must appear before the first file name. The default is @{i}yes@{ui} when running in etags mode (see the @{b}-e@{ub} option), @{i}no@{ui} otherwise.  @{lindent 0}

@{bullet} @{b}--totals@{ub}[=@{i}yes@{ui}|@{i}no@{ui}] @{lindent 3}
Prints statistics about the source files read and the tag file written during the current invocation of @{b}ctags@{ub}. This option is off by default. This option must appear before the first file name.  @{lindent 0}

@{bullet} @{b}--verbose@{ub}[=@{i}yes@{ui}|@{i}no@{ui}] @{lindent 3}
Enable verbose mode. This prints out information on option processing and a brief message describing what action is being taken for each file considered by @{b}ctags@{ub}. Normally, @{b}ctags@{ub} does not read command line arguments until after options are read from the configuration files (see @{b}FILES@{ub}, below) and the @{b}CTAGS@{ub} environment variable. However, if this option is the first argument on the command line, it will take effect before any options are read from these sources. The default is @{i}no@{ui}.  @{lindent 0}

@{bullet} @{b}--version@{ub} @{lindent 3}
Prints a version identifier for @{b}ctags@{ub} to standard output. This is guaranteed to always contain the string "Exuberant Ctags".   @{lindent 0}


@endnode

@node sect5 "Operational Details"
@prev sect4
@toc main
@index "vi section"
 As @{b}ctags@{ub} considers each file name in turn, it tries to determine the language of the file by applying the following three tests in order: if the file extension has been mapped to a language, if the file name matches a shell pattern mapped to a language, and finally if the file is executable and its first line specifies an interpreter using the Unix-style "#!" specification (if supported on the platform). If a language was identified, the file is opened and then the appropriate language parser is called to operate on the currently open file. The parser parses through the file and adds an entry to the tag file for each language object it is written to handle. See @{b}TAG FILE FORMAT@{ub}, below, for details on these entries.  This implementation of @{b}ctags@{ub} imposes no formatting requirements on C code as do legacy implementations. Older implementations of ctags tended to rely upon certain formatting assumptions in order to help it resolve coding dilemmas caused by preprocessor conditionals.  In general, @{b}ctags@{ub} tries to be smart about conditional preprocessor directives. If a preprocessor conditional is encountered within a statement which defines a tag, @{b}ctags@{ub} follows only the first branch of that conditional (except in the special case of "#if 0", in which case it follows only the last branch). The reason for this is that failing to pursue only one branch can result in ambiguous syntax, as in the following example:  @{lindent 3}
#ifdef TWO_ALTERNATIVES 
struct { 
#else 
union { 
#endif @{lindent 6}
short a; 
long b; @{lindent 3}
} @{lindent 0}
 Both branches cannot be followed, or braces become unbalanced and @{b}ctags@{ub} would be unable to make sense of the syntax.  If the application of this heuristic fails to properly parse a file, generally due to complicated and inconsistent pairing within the conditionals, @{b}ctags@{ub} will retry the file using a different heuristic which does not selectively follow conditional preprocessor branches, but instead falls back to relying upon a closing brace ("}") in column 1 as indicating the end of a block once any brace imbalance results from following a #if conditional branch.  @{b}Ctags@{ub} will also try to specially handle arguments lists enclosed in double sets of parentheses in order to accept the following conditional construct:  @{lindent 3}
extern void foo __ARGS((int one, char two)); @{lindent 0}
 Any name immediately preceding the "((" will be automatically ignored and the previous name will be used.  C++ operator definitions are specially handled. In order for consistency with all types of operators (overloaded and conversion), the operator name in the tag file will always be preceded by the string "operator " (i.e. even if the actual operator definition was written as "operator<<").  After creating or appending to the tag file, it is sorted by the tag name, removing identical tag lines.   
@endnode

@node sect6 "Tag File Format"
@prev sect5
@toc main
@index "vi section"
 When not running in etags mode, each entry in the tag file consists of a separate line, each looking like this in the most general case:  @{lindent 3}
tag_name<TAB>file_name<TAB>ex_cmd;"<TAB>extension_fields @{lindent 0}
 The fields and separators of these lines are specified as follows:   @{lindent 3}


@{bullet} 1. @{lindent 6}
tag name @{lindent 3}

@{bullet} 2. @{lindent 6}
single tab character @{lindent 3}

@{bullet} 3. @{lindent 6}
name of the file in which the object associated with the tag is located @{lindent 3}

@{bullet} 4. @{lindent 6}
single tab character @{lindent 3}

@{bullet} 5. @{lindent 6}
EX command used to locate the tag within the file; generally a search pattern (either /pattern/ or ?pattern?) or line number (see @{b}--excmd@{ub}). Tag file format 2 (see @{b}--format@{ub}) extends this EX command under certain circumstances to include a set of extension fields (described below) embedded in an EX comment immediately appended to the EX command, which leaves it backward-compatible with original @{"vi(1)" link vi1 @index "vi"}@{b}vi@{ub}(1) implementations. @{lindent 3}

@{lindent 0}
  A few special tags are written into the tag file for internal purposes. These tags are composed in such a way that they always sort to the top of the file. Therefore, the first two characters of these tags are used a magic number to detect a tag file for purposes of determining whether a valid tag file is being overwritten rather than a source file.  Note that the name of each source file will be recorded in the tag file exactly as it appears on the command line. Therefore, if the path you specified on the command line was relative to the current directory, then it will be recorded in that same manner in the tag file. See, however, the @{b}--tag-relative@{ub} option for how this behavior can be modified.  Extension fields are tab-separated key-value pairs appended to the end of the EX command as a comment, as described above. These key value pairs appear in the general form "@{i}key@{ui}:@{i}value@{ui}". Their presence in the lines of the tag file are controlled by the @{b}--fields@{ub} option. The possible keys and the meaning of their values are as follows:  

@{bullet} @{i}access@{ui} @{lindent 3}
Indicates the visibility of this class member, where @{i}value@{ui} is specific to the language.  @{lindent 0}

@{bullet} @{i}file@{ui} @{lindent 3}
Indicates that the tag has file-limited visibility. This key has no corresponding value.  @{lindent 0}

@{bullet} @{i}kind@{ui} @{lindent 3}
Indicates the type, or kind, of tag. Its value is either one of the corresponding one-letter flags described under the various @{b}--<LANG>-kinds@{ub} options above, or a full name. It is permitted (and is, in fact, the default) for the key portion of this field to be omitted. The optional behaviors are controlled with the @{b}--fields@{ub} option.  @{lindent 0}

@{bullet} @{i}implementation@{ui} @{lindent 3}
When present, this indicates a limited implementation (abstract vs. concrete) of a routine or class, where @{i}value@{ui} is specific to the language ("virtual" or "pure virtual" for C++; "abstract" for Java).  @{lindent 0}

@{bullet} @{i}inherits@{ui} @{lindent 3}
When present, @{i}value@{ui}. is a comma-separated list of classes from which this class is derived (i.e. inherits from).  @{lindent 0}

@{bullet} @{i}signature@{ui} @{lindent 3}
When present, @{i}value@{ui}. is a language-dependent representation of the signature of a routine. A routine signature in its complete form specifies the return type of a routine and its formal argument list. This extension field is presently supported only for C-based languages and does not include the return type.  @{lindent 0}

In addition, information on the scope of the tag definition may be available, with the key portion equal to some language-dependent construct name and its value the name declared for that construct in the program. This scope entry indicates the scope in which the tag was found. For example, a tag generated for a C structure member would have a scope looking like "struct:myStruct".   


@endnode

@node sect7 "How to Use with vi"
@prev sect6
@toc main
@index "vi section"
Vi will, by default, expect a tag file by the name "tags" in the current directory. Once the tag file is built, the following commands exercise the tag indexing feature: 

@{bullet} @{b}vi -t tag@{ub} @{lindent 3}
Start vi and position the cursor at the file and line where "tag" is defined. @{lindent 0}

@{bullet} @{b}:ta tag@{ub} @{lindent 3}
Find a tag. @{lindent 0}

@{bullet} @{b}Ctrl-]@{ub} @{lindent 3}
Find the tag under the cursor. @{lindent 0}

@{bullet} @{b}Ctrl-T@{ub} @{lindent 3}
Return to previous location before jump to tag (not widely implemented).   @{lindent 0}


@endnode

@node sect8 "How to Use with GNU Emacs"
@prev sect7
@toc main
@index "vi section"
Emacs will, by default, expect a tag file by the name "TAGS" in the current directory. Once the tag file is built, the following commands exercise the tag indexing feature: 

@{bullet} @{b}M-x visit-tags-table <RET> FILE <RET>@{ub} @{lindent 3}
Select the tag file, "FILE", to use. @{lindent 0}

@{bullet} @{b}M-. [TAG] <RET>@{ub} @{lindent 3}
Find the first definition of TAG. The default tag is the identifier under the cursor. @{lindent 0}

@{bullet} @{b}M-*@{ub} @{lindent 3}
Pop back to where you previously invoked "M-.". @{lindent 0}

@{bullet} @{b}C-u M-.@{ub} @{lindent 3}
Find the next definition for the last tag.  @{lindent 0}

For more commands, see the @{i}Tags@{ui} topic in the Emacs info document.   


@endnode

@node sect9 "How to Use with Nedit"
@prev sect8
@toc main
@index "vi section"
NEdit version 5.1 and later can handle the new extended tag file format (see @{b}--format@{ub}). To make NEdit use the tag file, select "File->Load Tags File". To jump to the definition for a tag, highlight the word, the press Ctrl-D. NEdit 5.1 can can read multiple tag files from different directories. Setting the X resource nedit.tagFile to the name of a tag file instructs NEdit to automatically load that tag file at startup time.   
@endnode

@node sect10 "Caveats"
@prev sect9
@toc main
@index "vi section"
Because @{b}ctags@{ub} is neither a preprocessor nor a compiler, use of preprocessor macros can fool @{b}ctags@{ub} into either missing tags or improperly generating inappropriate tags. Although @{b}ctags@{ub} has been designed to handle certain common cases, this is the single biggest cause of reported problems. In particular, the use of preprocessor constructs which alter the textual syntax of C can fool @{b}ctags@{ub}. You can work around many such problems by using the @{b}-I@{ub} option.  White space is treated as a separator for file names and options read from list files, specified using the @{b}-L@{ub} option, and in filter mode (specified using the @{b}--filter@{ub} option). Therefore, it is not currently possible to supply file names or other options containing embedded white space (spaces, etc.) through these options.  Note that when @{b}ctags@{ub} generates uses patterns for locating tags (see the @{b}--excmd@{ub} option), it is entirely possible that the wrong line may be found by your editor if there exists another source line which is identical to the line containing the tag. The following example demonstrates this condition:  @{lindent 3}
int variable;  /* ... */ 
void foo(variable) 
int variable; 
{ @{lindent 6}
/* ... */ @{lindent 3}
} @{lindent 0}
 Depending upon which editor you use and where in the code you happen to be, it is possible that the search pattern may locate the local parameter declaration in foo() before it finds the actual global variable definition, since the lines (and therefore their search patterns are identical). This can be avoided by use of the @{b}--excmd@{ub}=@{i}n@{ui} option.   
@endnode

@node sect11 "Bugs"
@prev sect10
@toc main
@index "vi section"
@{b}Ctags@{ub} has more options than @{"ls(1)" link ls1 @index "ls"}@{b}ls@{ub}(1).  When parsing a C++ member function definition (e.g. "className::function"), @{b}ctags@{ub} cannot determine whether the scope specifier is a class name or a namespace specifier and always lists it as a class name in the scope portion of the extension fields. Also, if a C++ function is defined outside of the class declaration (the usual case), the access specification (i.e. public, protected, or private) and implementation information (e.g. virtual, pure virtual) contained in the function declaration are not known when the tag is generated for the function definition. It will, however be available for prototypes (e.g @{b}--c++-kinds@{ub}=@{i}+p@{ui}).  No qualified tags are generated for language objects inherited into a class.   
@endnode

@node sect12 "Environment Variables"
@prev sect11
@toc main
@index "ls section"
 

@{bullet} @{b}CTAGS@{ub} @{lindent 3}
If this environment variable exists, it will be expected to contain a set of default options which are read when @{b}ctags@{ub} starts, after the configuration files listed in @{b}FILES@{ub}, below, are read, but before any command line options are read. Options appearing on the command line will override options specified in this variable. Only options will be read from this variable. Note that all white space in this variable in considered a separator, making it impossible to pass an option parameter containing an embedded space. If this is a problem, use a configuration file instead.  @{lindent 0}

@{bullet} @{b}ETAGS@{ub} @{lindent 3}
Similar to the @{b}CTAGS@{ub} variable above, this variable, if found, will be read when @{b}etags@{ub} starts. If this variable is not found, @{b}etags@{ub} will try to use @{b}CTAGS@{ub} instead.  @{lindent 0}

@{bullet} @{b}TMPDIR@{ub} @{lindent 3}
On Unix-like hosts where mkstemp() is available, the value of this variable specifies the directory in which to place temporary files. This can be useful if the size of a temporary file becomes too large to fit on the partition holding the default temporary directory defined at compilation time. @{b}ctags@{ub} creates temporary files only if @{"either(1)" link either1 @index "either"}either (1) an emacs-style tag file is being generated, (2) the tag file is being sent to standard output, @{"or(3)" link or3 @index "or"}or (3) the program was compiled to use an internal sort algorithm to sort the tag files instead of the the sort utility of the operating system. If the sort utility of the operating system is being used, it will generally observe this variable also. Note that if @{b}ctags@{ub} is setuid, the value of TMPDIR will be ignored.   @{lindent 0}


@endnode

@node sect13 "Files"
@prev sect12
@toc main
@index "or section"
 @{i}/ctags.cnf@{ui} (on MSDOS, MSWindows only) 
@{i}/etc/ctags.conf@{ui} 
@{i}/usr/local/etc/ctags.conf@{ui} 
@{i}$HOME/.ctags@{ui} ($HOME/ctags.cnf on MSDOS, MSWindows) 
@{i}.ctags@{ui} (ctags.cnf on MSDOS, MSWindows) 

@{bullet} If any of these configuration files exist, each will be expected to contain a @{lindent 3}
set of default options which are read in the order listed when @{b}ctags@{ub} starts, but before the @{b}CTAGS@{ub} environment variable is read or any command line options are read. This makes it possible to set up site-wide, personal or project-level defaults. It is possible to compile @{b}ctags@{ub} to read an additional configuration file before any of those shown above, which will be indicated if the output produced by the @{b}--version@{ub} option lists the "custom-conf" feature. Options appearing in the @{b}CTAGS@{ub} environment variable or on the command line will override options specified in these files. Only options will be read from these files. Note that the option files are read in line-oriented mode in which spaces are significant (since shell quoting is not possible). Each line of the file is read as one command line parameter (as if it were quoted with single quotes). Therefore, use new lines to indicate separate command-line arguments.   @{lindent 0}

@{bullet} @{i}tags@{ui} @{lindent 3}
The default tag file created by @{b}ctags@{ub}. @{lindent 0}

@{bullet} @{i}TAGS@{ui} @{lindent 3}
The default tag file created by @{b}etags@{ub}.  @{lindent 0}


@endnode

@node sect14 "See Also"
@prev sect13
@toc main
@index "or section"
The official Exuberant Ctags web site at:  @{lindent 3}
http://ctags.sourceforge.net @{lindent 0}
 Also @{"ex(1)" link ex1 @index "ex"}@{b}ex@{ub}(1), @{"vi(1)" link vi1 @index "vi"}@{b}vi@{ub}(1), @{b}elvis@{ub}, or, better yet, @{b}vim@{ub}, the official editor of @{b}ctags@{ub}. For more information on @{b}vim@{ub}, see the VIM Pages web site at:  @{lindent 3}
http://www.vim.org/ @{lindent 0}
  
@endnode

@node sect15 "Author"
@prev sect14
@toc main
@index "vi section"
Darren Hiebert <dhiebert@users.sourceforge.net> 
http://DarrenHiebert.com/   
@endnode

@node sect16 "Motivation"
@prev sect15
@toc main
@index "vi section"
"Think ye at all times of rendering some service to every member of the human race."  "All effort and exertion put forth by man from the fullness of his heart is worship, if it is prompted by the highest motives and the will to do service to humanity."  @{lindent 3}
-- From the Baha'i Writings @{lindent 0}
  
@endnode

@node sect17 "Credits"
@prev sect16
@toc main
@index "vi section"
This version of @{b}ctags@{ub} was originally derived from and inspired by the ctags program by Steve Kirkendall <kirkenda@cs.pdx.edu> that comes with the Elvis vi clone (though virtually none of the original code remains).  Credit is also due Bram Moolenaar <Bram@vim.org>, the author of @{b}vim@{ub}, who has devoted so much of his time and energy both to developing the editor as a service to others, and to helping the orphans of Uganda.  The section entitled "HOW TO USE WITH GNU EMACS" was shamelessly stolen from the info page for GNU @{b}etags@{ub}. 
@endnode
@node overview "Overview"
@next sect0
@prev main
@toc main

@{b}CTAGS@{ub} is a powerful tool for converting Unix manual pages between different formats. It can read man pages in various formats and output them as HTML, LaTeX, RTF, AmigaGuide, and many other formats.

This manual describes how to use CTAGS to convert your Unix documentation to AmigaGuide format for use on Amiga systems.

@{b}Key Features:@{ub}
@{bullet} Convert Unix man pages to AmigaGuide format
@{bullet} Support for multiple input formats
@{bullet} Preserve formatting and structure
@{bullet} Create native Amiga documentation

@endnode

@node main "CTAGS(1)"
@next overview
@{b}Table of Contents@{ub}

@{"Overview" link overview}
@{"Name" link sect0}
@{"Synopsis" link sect0}
@{"Description" link sect0}
@{"Source Files" link sect0}
@{"Options" link sect0}
@{"Operational Details" link sect0}
@{"Tag File Format" link sect0}
@{"How to Use with vi" link sect0}
@{"How to Use with GNU Emacs" link sect0}
@{"How to Use with Nedit" link sect0}
@{"Caveats" link sect0}
@{"Bugs" link sect0}
@{"Environment Variables" link sect0}
@{"Files" link sect0}
@{"See Also" link sect0}
@{"Author" link sect0}
@{"Motivation" link sect0}
@{"Credits" link sect0}

@endnode
